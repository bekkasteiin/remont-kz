import 'package:core/core.dart';import 'package:dependencies/dependencies.dart';import 'package:meta/meta.dart';import 'package:remont_kz/di.dart';import 'package:remont_kz/domain/repositories/auth_repo.dart';part 'auht_phone_state.dart';class AuthPhoneCubit extends CoreCubit {  final AuthRepo _authRepo;  AuthPhoneCubit()      : _authRepo = getIt.get<AuthRepo>(),        super(AuthPhoneInitial());  void sendSms(String phone) async {    // emit(AuhtPhoneSended());    //    // launch<void>(    //   request: _authRepo.sendSms(phone),    //   resultData: (val) {    //     emit(AuhtPhoneSuccesSend());    //   },    //   errorData: (String? e) {    //     // if (e is DioError) {    //     if (e == 'sms_send_too_frequent') {    //       emit(AuhtPhoneTextError('Cмс отправляются слишком часто'));    //     } else if (e == 'sms_send_fail') {    //       emit(AuhtPhoneTextError('Ошибка при отправке СМС, попробуйте с другой оператор'));    //     }    //    //     emit(AuhtPhoneInitial());    //     // } else {    //     //   // emit(AuhtPhoneError(e));    //     // }    //   },    // );    emit(AuthPhoneSend());    try {      await _authRepo.sendSms(phone);      emit(AuthPhoneSuccessSend());      emit(AuthPhoneInitial());    } catch (e) {      if (e is DioError) {        if (e.response?.data['error_code'] == 'sms_send_too_frequent') {          emit(AuthPhoneTextError('Cмс отправляются слишком часто'));        } else if (e.response?.data['error_code'] == 'sms_send_fail') {          emit(AuthPhoneTextError('Ошибка при отправке СМС, попробуйте с другой оператор'));        } else if (e.response?.data['error_code'] == 'bad_phone_format') {          emit(AuthPhoneTextError('Не правильно формат номера'));        }        emit(AuthPhoneInitial());      } else {        emit(AuthPhoneError(e));        emit(AuthPhoneInitial());      }    }  }}