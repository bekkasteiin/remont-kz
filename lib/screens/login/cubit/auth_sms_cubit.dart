import 'package:core/core.dart';import 'package:meta/meta.dart';import 'package:remont_kz/di.dart';import 'package:remont_kz/domain/entities/user.dart';import 'package:remont_kz/domain/repositories/auth_repo.dart';part 'auth_sms_state.dart';class AuthSmsCubit extends CoreCubit {  final AuthRepo _authRepo;  AuthSmsCubit()      : _authRepo = getIt.get<AuthRepo>(),        super(AuthSmsInitialState());  User? _user;  User? get currentUser => _user;  void init() {    emit(AuthSmsInitialState());  }  Future checkSms(String phone, int code, String password) async {    emit(AuthCheckedSms());    launch(      request: _authRepo.checkSms(phone, code, password),      resultData: (bool? val) {        emit(AuthSmsCodeVerifiedState());      },      errorData: (String? error) {        if(error == 'wrong_sms_code'){          emit(AuthSmsCodeNotVerifiedState());                emit(AuthSmsInitialState());        }      }    );    // try {    //   await _authRepo.checkSms(phone, code);    //   emit(AuthSmsCodeVerifiedState());    // } catch (e) {    //   if (e is DioError) {    //     if (e.response?.data['error_code'] == 'wrong_sms_code') {    //       emit(AuthSmsCodeNotVerifiedState());    //       emit(AuthSmsInitialState());    //     }    //   } else {    //     emit(AuthSmsErrorState(e));    //   }    // }  }}